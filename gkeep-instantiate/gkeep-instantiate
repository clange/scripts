#!/usr/bin/env python
import netrc
import gkeepapi
import datetime
import sys
import re
# import pprint

# get the next weekday on or after the given date
# source: https://stackoverflow.com/a/37649782
onDay = lambda date, weekday: date + datetime.timedelta(days=(weekday-date.weekday()+7)%7)

# get notes by exact title match
getNotesByTitle = lambda title: keep.find(query=re.compile(f'^{title}$'))

# configuration
SHOP_DAY = 5 # Saturday
TEMPLATE_LABEL = 'Vorlage'

# get next shopping day on or after today
nextday = onDay(datetime.date.today(), SHOP_DAY)
# print(nextday)
# sys.exit(0)

# parse command line arguments
title = sys.argv[1]

# read login
netrc = netrc.netrc()
username, _, password = netrc.authenticators('google.com')
# initialize Keep API
keep = gkeepapi.Keep()
keep.login(username, password)
# get template label
label = keep.findLabel(TEMPLATE_LABEL)
# retrieve note template
oldNotes = getNotesByTitle(title)
foundTemplate = False
for oldNote in oldNotes:
    # make sure the note is labeled as a template
    if oldNote.labels.get(label.id) == None:
        continue
    foundTemplate = True
    # TODO check if note does not yet exist
    # credits to https://github.com/kiwiz/gkeepapi/issues/75#issuecomment-58819720
    if isinstance(oldNote, gkeepapi.node.List):
        newNote = keep.createList(f'{oldNote.title} {nextday}')
        # copy list items and their indentation
        for oldListItem in oldNote.items:
            newListItem = newNote.add(oldListItem.text, oldListItem.checked, gkeepapi.node.NewListItemPlacementValue.Bottom)
            # if oldListItem.checked:
            #     print('âœ“')
            # print(oldListItem.text)
            if oldListItem.indented:
                # we assume that the last non-indented node will act as this node's parent.  In this situation, the value is not null, as the first item of a list is never indented.
                lastParentItem.indent(newListItem)
            else:
                lastParentItem = newListItem
    else:
        # create a new note containing the same text as the old one
        newNote = keep.createNote(f'{oldNote.title} {nextday}', oldNote.text)

    # copy all labels except template
    for label in oldNote.labels.all():
        if label.name != TEMPLATE_LABEL:
            # print(label.name)
            newNote.labels.add(label)

    # copy collaborators
    for collaborator in oldNote.collaborators.all():
        newNote.collaborators.add(collaborator)

    keep.sync()
    # We assume that there is only one such note.
    break

if not foundTemplate:
    sys.exit('No template note found')
